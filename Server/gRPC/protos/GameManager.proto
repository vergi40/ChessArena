syntax = "proto3";

package GameManager;

service GameService {
    // A simple RPC
    //
    // Inform server that the client is ready to start the game. 
    // Returns one of the following:
    // 1. Player is starting player. Opponent act message not set.
    // 2. Player is not starting player. Opponent act returned.
    rpc Initialize(GameInformation) returns (GameStartInformation) {}

    // A Bidirectional streaming RPC.
    // Send player moves. Receive opponent moves.
    rpc Act(stream Move) returns (stream Move) {}

    // OPTIONAL helper rpc
    //
    // Game client can validate that GameManager is running. For connection testing
    rpc Ping(PingMessage) returns (PingMessage) {}
}

service WebService {
    // Web server ensures that GameManager is running
    rpc Ping(PingMessage) returns (PingMessage) {}

    // Web server start listening to move updates
    rpc ListenMoveUpdates(PingMessage) returns (stream Move) {}
}

// Initialize game manager with wanted game
message GameInformation {
    string name = 1;
    oneof game {
        string chess = 2;
    }
}

message GameStartInformation {
    // True if caller is the starting player.
    // If false, opponent move is also returned.
    bool start = 1;
    oneof opponentAct {
        Move chessMove = 2;
    }
}

message Move {
    oneof game {
        ChessMove chess = 1;
    }
    // Any optional additional data about the move.
    string diagnostics = 2;
}

message ChessMove {
    // Standard chess notation (file, rank), e.g. "f5"
    string start_position = 1;
    // Standard chess notation (file, rank) e.g. "f6"
    string end_position = 2;
    bool check = 3;    
    bool check_mate = 4;
    bool castling = 5;
    enum PromotionPieceType {
        NO_PROMOTION = 0;
        QUEEN = 1;
        ROOK = 2;
        KNIGHT = 3;
        BISHOP = 4;
    }
    // Set to non-zero if pawn has reached 8th rank.
    PromotionPieceType promotion_result = 6;
}

message PingMessage {
    string message = 1;
}